version: 2
jobs:
  build:
    working_directory: ~/core.typed
    docker:
      - image: circleci/openjdk:8-jdk
    #parallelism: 2
    steps:
      - checkout

      # START: ctyp-323-cljs setup
      - run:
          filters:
            branches:
              only: ctyp-323-cljs
          name: Install leiningen
          command: |
            mkdir ~/bin
            cd ~/bin
            wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
            chmod +x lein
            ./lein
      - run:
          filters:
            branches:
              only: ctyp-323-cljs
          name: Clone CLJS fork
          command: git clone -b tools.analyzer-ast https://github.com/frenchy64/clojurescript.git ~/cljs
      - run:
          filters:
            branches:
              only: ctyp-323-cljs
          name: Install CLJS fork
          command: |
            echo $(git branch -v)
            cd ~/cljs
            ~/bin/lein install
      # END: ctyp-323-cljs setup

      - restore_cache:
          keys:
            - core-typed-{{ .Branch }}-{{ checksum "pom.xml" }}-{{ checksum "module-check/pom.xml" }}-{{ checksum "module-rt/pom.xml" }}-{{ checksum "module-cljs/pom.xml" }}
            - core-typed-{{ .Branch }}-{{ checksum "pom.xml" }}-{{ checksum "module-check/pom.xml" }}-{{ checksum "module-rt/pom.xml" }}
            - core-typed-{{ .Branch }}-{{ checksum "pom.xml" }}-{{ checksum "module-check/pom.xml" }}
            - core-typed-{{ .Branch }}-{{ checksum "pom.xml" }}
            - core-typed-{{ .Branch }}
            - core-typed-
      - run:
          name: Resolve dependencies
          command: mvn -DskipTests clean install dependency:resolve-plugins dependency:go-offline
      - save_cache:
          key: core-typed-{{ .Branch }}-{{ checksum "pom.xml" }}-{{ checksum "module-check/pom.xml" }}-{{ checksum "module-rt/pom.xml" }}-{{ checksum "module-cljs/pom.xml" }}
          paths:
            - "~/.m2"

      #Actually run our tests
      - run:
          name: Unit Tests
          command: mvn -o test
